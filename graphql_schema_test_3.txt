### Here is the graphQL schema of the opentargets database:
# "Associated Disease Entity"
# type AssociatedDisease {
#   score: Float!
#   datatypeScores: [ScoredComponent!]!
#   datasourceScores: [ScoredComponent!]!
#   "Disease"
#   disease: Disease!
# }

# type AssociatedDiseases {
#   datasources: [DatasourceSettings!]!
#   aggregations: Aggregations
#   count: Long!

#   "Associated Targets using (On the fly method)"
#   rows: [AssociatedDisease!]!
# }

# "Associated Target Entity"
# type AssociatedTarget {
#   score: Float!
#   datatypeScores: [ScoredComponent!]!
#   datasourceScores: [ScoredComponent!]!

#   "Target"
#   target: Target!
# }

# type AssociatedTargets {
#   datasources: [DatasourceSettings!]!
#   aggregations: Aggregations
#   count: Long!

#   "Associated Targets using (On the fly method)"
#   rows: [AssociatedTarget!]!
# }


# type CancerHallmark {
#   description: String!
#   impact: String
#   label: String!
#   pmid: Long!
# }


# "Disease or phenotype entity"
# type Disease {
#   "Open Targets disease id"
#   id: String!

#   "Disease name"
#   name: String!

#   "Disease description"
#   description: String

#   "List of external cross reference IDs"
#   dbXRefs: [String!]

#   "List of direct location Disease terms"
#   directLocationIds: [String!]

#   "List of indirect location Disease terms"
#   indirectLocationIds: [String!]

#   "List of obsolete diseases"
#   obsoleteTerms: [String!]

#   "Disease synonyms"
#   synonyms: [DiseaseSynonyms!]
#   ancestors: [String!]!
#   descendants: [String!]!

#   "Ancestor therapeutic area disease entities in ontology"
#   therapeuticAreas: [Disease!]!

#   "Disease parents entities in ontology"
#   parents: [Disease!]!

#   "Disease children entities in ontology"
#   children: [Disease!]!

#   "Direct Location disease terms"
#   directLocations: [Disease!]!

#   "Indirect Location disease terms"
#   indirectLocations: [Disease!]!

#   "Return similar labels using a model Word2CVec trained with PubMed"
#   similarEntities(
#     "List of IDs either EFO ENSEMBL CHEMBL"
#     additionalIds: [String!],

#     "List of entity names to search for (target, disease, drug,...)"
#     entityNames: [String!],

#     "Threshold similarity between 0 and 1"
#     threshold: Float, size: Int): [Similarity!]!

#   "Return the list of publications that mention the main entity, alone or in combination with other entities"
#   literatureOcurrences(
#     "List of IDs either EFO ENSEMBL CHEMBL"
#     additionalIds: [String!],

#     "Year at the lower end of the filter"
#     startYear: Int,

#     "Month at the lower end of the filter"
#     startMonth: Int,

#     "Year at the higher end of the filter"
#     endYear: Int,

#     "Month at the higher end of the filter"
#     endMonth: Int, cursor: String): Publications!

#   "Is disease a therapeutic area itself"
#   isTherapeuticArea: Boolean!

#   "Phenotype from HPO index"
#   phenotypes(page: Pagination): DiseaseHPOs

#   "The complete list of all possible datasources"
#   evidences(
#     "List of Ensembl IDs"
#     ensemblIds: [String!]!,

#     "Use disease ontology to capture evidences from all descendants to build associations"
#     enableIndirect: Boolean,

#     "List of datasource ids"
#     datasourceIds: [String!], size: Int, cursor: String): Evidences!

#   "RNA and Protein baseline expression"
#   otarProjects: [OtarProject!]!

#   "Clinical precedence for investigational or approved drugs indicated for disease and curated mechanism of action"
#   knownDrugs(
#     "Query string"
#     freeTextQuery: String, size: Int, cursor: String): KnownDrugs

#   "associations on the fly"
#   associatedTargets(Bs: [String!],

#     "Use disease ontology to capture evidences from all descendants to build associations"
#     enableIndirect: Boolean, datasources: [DatasourceSettingsInput!], aggregationFilters: [AggregationFilter!], BFilter: String, orderByScore: String, page: Pagination): AssociatedTargets!
# }

# "Drug/Molecule entity"
# type Drug {
#   "Open Targets molecule id"
#   id: String!

#   "Molecule preferred name"
#   name: String!

#   "Molecule synonyms"
#   synonyms: [String!]!

#   "Drug trade names"
#   tradeNames: [String!]!

#   "Year drug was approved for the first time"
#   yearOfFirstApproval: Int

#   "Drug modality"
#   drugType: String!

#   "Alias for maximumClinicalTrialPhase == 4"
#   isApproved: Boolean
#   crossReferences: [DrugReferences!]

#   "Maximum phase observed in clinical trial records and post-marketing package inserts"
#   maximumClinicalTrialPhase: Float

#   "Has drug been withdrawn from the market"
#   hasBeenWithdrawn: Boolean!

#   "Alert on life-threteaning drug side effects provided by FDA"
#   blackBoxWarning: Boolean!

#   "Drug description"
#   description: String

#   "ChEMBL ID of parent molecule"
#   parentMolecule: Drug

#   "Chembl IDs of molecules that descend from current molecule."
#   childMolecules: [Drug!]!

#   "Indications for which there is a phase IV clinical trial"
#   approvedIndications: [String!]

#   "Warnings present on drug as identified by ChEMBL."
#   drugWarnings: [DrugWarning!]!

#   "Return similar labels using a model Word2CVec trained with PubMed"
#   similarEntities(
#     "List of IDs either EFO ENSEMBL CHEMBL"
#     additionalIds: [String!],

#     "List of entity names to search for (target, disease, drug,...)"
#     entityNames: [String!],

#     "Threshold similarity between 0 and 1"
#     threshold: Float, size: Int): [Similarity!]!

#   "Return the list of publications that mention the main entity, alone or in combination with other entities"
#   literatureOcurrences(
#     "List of IDs either EFO ENSEMBL CHEMBL"
#     additionalIds: [String!],

#     "Year at the lower end of the filter"
#     startYear: Int,

#     "Month at the lower end of the filter"
#     startMonth: Int,

#     "Year at the higher end of the filter"
#     endYear: Int,

#     "Month at the higher end of the filter"
#     endMonth: Int, cursor: String): Publications!

#   "Mechanisms of action to produce intended pharmacological effects. Curated from scientific literature and post-marketing package inserts"
#   mechanismsOfAction: MechanismsOfAction

#   "Investigational and approved indications curated from clinical trial records and post-marketing package inserts"
#   indications: Indications

#   "Curated Clinical trial records and and post-marketing package inserts with a known mechanism of action"
#   knownDrugs(
#     "Query string"
#     freeTextQuery: String, size: Int, cursor: String): KnownDrugs

#   "Significant adverse events inferred from FAERS reports"
#   adverseEvents(page: Pagination): AdverseEvents

#   "Therapeutic indications for drug based on clinical trial data or post-marketed drugs, when mechanism of action is known\""
#   linkedDiseases: LinkedDiseases

#   "Molecule targets based on drug mechanism of action"
#   linkedTargets: LinkedTargets
# }
# "Sequence Ontology Term"
# type EvidenceVariation {
#   functionalConsequence: SequenceOntologyTerm
#   numberMutatedSamples: Long
#   numberSamplesTested: Long
#   numberSamplesWithMutationType: Long
# }
# type GeneOntology {
#   aspect: String!
#   evidence: String!
#   geneProduct: String!
#   source: String!

#   "Gene ontology term"
#   term: GeneOntologyTerm!
# }

# type GeneOntologyTerm {
#   id: String!
#   name: String!
# }

# type GenomicLocation {
#   chromosome: String!
#   start: Long!
#   end: Long!
#   strand: Int!
# }


# type HallmarkAttribute {
#   name: String!
#   description: String!
#   pmid: Long
# }

# type Hallmarks {
#   cancerHallmarks: [CancerHallmark!]!
#   attributes: [HallmarkAttribute!]!
# }

# type IdAndSource {
#   id: String!
#   source: String!
# }


# "A key-value pair"
# type KeyValue {
#   key: String!
#   value: String!
# }

# "An array of key-value pairs"
# type KeyValueArray {
#   items: [KeyValue!]!
# }
# "Set of clinical precedence for drugs with investigational or approved indications targeting gene products according to their curated mechanism of action"
# type KnownDrugs {
#   "Total unique drugs/molecules"
#   uniqueDrugs: Long!

#   "Total unique diseases or phenotypes"
#   uniqueDiseases: Long!

#   "Total unique known mechanism of action targetsTotal unique known mechanism of action targets"
#   uniqueTargets: Long!

#   "Total number of entries"
#   count: Long!
#   cursor: String

#   "Clinical precedence entries with known mechanism of action"
#   rows: [KnownDrug!]!
# }

# "Linked Disease Entities"
# type LinkedDiseases {
#   count: Int!

#   "Disease List"
#   rows: [Disease!]!
# }

# "Linked Target Entities"
# type LinkedTargets {
#   count: Int!

#   "Target List"
#   rows: [Target!]!
# }



# "Pathway entry"
# type Pathway {
#   "Pathway ID"
#   id: String!

#   "Pathway Name"
#   name: String!
# }


# type Query {
#   "Return Open Targets API metadata information"
#   meta: Meta!

#   "Return a Target"
#   target(
#     "Ensembl ID"
#     ensemblId: String!): Target

#   "Return Targets"
#   targets(
#     "List of Ensembl IDs"
#     ensemblIds: [String!]!): [Target!]!

#   "Return a Disease"
#   disease(
#     "EFO ID"
#     efoId: String!): Disease

#   "Return Diseases"
#   diseases(
#     "EFO ID"
#     efoIds: [String!]!): [Disease!]!

#   "Return a drug"
#   drug(
#     "Chembl ID"
#     chemblId: String!): Drug

#   "Return drugs"
#   drugs(
#     "List of Chembl IDs"
#     chemblIds: [String!]!): [Drug!]!

#   "Multi entity search"
#   search(
#     "Query string"
#     queryString: String!,

#     "List of entity names to search for (target, disease, drug,...)"
#     entityNames: [String!], page: Pagination): SearchResults!

#   "The complete list of all possible datasources"
#   associationDatasources: [EvidenceSource!]!

#   "The complete list of all possible datasources"
#   interactionResources: [InteractionResources!]!

#   "Gene ontology terms"
#   geneOntologyTerms(
#     "List of GO IDs, eg. GO:0005515"
#     goIds: [String!]!): [GeneOntologyTerm]!
# }


# type ReactomePathway {
#   pathway: String!
#   pathwayId: String!
#   topLevelTerm: String!
# }

# type SearchResult {
#   id: String!
#   entity: String!
#   category: [String!]!
#   name: String!
#   description: String
#   keywords: [String!]
#   multiplier: Float!
#   prefixes: [String!]
#   ngrams: [String!]
#   score: Float!
#   highlights: [String!]!

#   "Associations for a fixed target"
#   object: EntityUnionType
# }


# "Search results"
# type SearchResults {
#   "Aggregations"
#   aggregations: SearchResultAggs

#   "Return combined"
#   hits: [SearchResult!]!

#   "Total number or results given a entity filter"
#   total: Long!
# }


# "Sequence Ontology Term"
# type SequenceOntologyTerm {
#   "Sequence Ontology ID"
#   id: String!

#   "Sequence Ontology Label"
#   label: String!
# }


# "Target entity"
# type Target {
#   "Open Targets target id"
#   id: String!
#   alternativeGenes: [String!]!

#   "HGNC approved symbol"
#   approvedSymbol: String!

#   "Approved gene name"
#   approvedName: String!

#   "Molecule biotype"
#   biotype: String!
#   chemicalProbes: [ChemicalProbe!]!

#   "Database cross references"
#   dbXrefs: [IdAndSource!]!

#   "..."
#   functionDescriptions: [String!]!

#   "Symbol synonyms"
#   geneticConstraint: [Constraint!]!

#   "Chromosomic location"
#   genomicLocation: GenomicLocation!

#   "Gene Ontology annotations"
#   geneOntology: [GeneOntology!]!

#   "Target-modulated essential alterations in cell physiology that dictate malignant growth"
#   hallmarks: Hallmarks

#   "Gene homologues"
#   homologues: [Homologue!]!

#   "Reactome pathways"
#   pathways: [ReactomePathway!]!

#   "Related protein IDs"
#   proteinIds: [IdAndSource!]!

#   "Known target safety effects and target safety risk information"
#   safetyLiabilities: [SafetyLiability!]!

#   "Location of ..."
#   subcellularLocations: [LocationAndSource!]!

#   "Alternative names and symbols"
#   synonyms: [LabelAndSource!]!

#   "Alternative symbols"
#   symbolSynonyms: [LabelAndSource!]!

#   "Alternative names"
#   nameSynonyms: [LabelAndSource!]!

#   "Obsolete symbols"
#   obsoleteSymbols: [LabelAndSource!]!

#   "Obsolete names"
#   obsoleteNames: [LabelAndSource!]!
#   targetClass: [TargetClass!]!

#   "Target Enabling Package (TEP)"
#   tep: Tep

#   "Target druggability assessment"
#   tractability: [Tractability!]!

#   "Ensembl transcript IDs"
#   transcriptIds: [String!]!

#   "Return similar labels using a model Word2CVec trained with PubMed"
#   similarEntities(
#     "List of IDs either EFO ENSEMBL CHEMBL"
#     additionalIds: [String!],

#     "List of entity names to search for (target, disease, drug,...)"
#     entityNames: [String!],

#     "Threshold similarity between 0 and 1"
#     threshold: Float, size: Int): [Similarity!]!

# type Tractability {
#   label: String!
#   modality: String!
#   value: Boolean!
# }

#"Linked Target Entities"
#type LinkedTargets {
#  count: Int!
#  "Target List"
#  rows: [Target!]!
#}
### Here is an example prompt to generate a graphQL query: What are the top 5 diseases associated with gene APOE?
#
### query query {
#   search(queryString: "APOE", entityNames: "target") {
#    hits { id,
#           name, 
#           entity,
#            object {
#               ... on Target {
#              associatedDiseases(page: {index: 0, size: 5}) {
#                 rows {
#                  score
#                   disease {
#                     name
#                       }
#                    }
#                }
#            }
#        }
#     }
#   }
# }
#}
### Here is an example prompt to generate a graphQL query: What is the symbol of the gene ENSG00000169083?
#
###query query {
#  target(ensemblId: "ENSG00000169083") {
#    id
#    approvedSymbol
#  }
#}
